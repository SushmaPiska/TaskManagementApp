  "title":"task222662",
  "priority":"high",
  "assignee":"ss",
  "checkList":{"check1":true,"check2":false},
  "dueDate":"2024-10-22"

  
"name":"name",
  "email":"email@gmail.com",
  "password":"password",
  "confirmPassword":"password"
  {

 "email":"scxx@x.com",
 "password":"password"
}
//////app.jsx/////////
// }
    // getAllTasksByType("backlog")
    //   .then((res) => {
    //     setBacklogTasks(res.data);
    //   })
    //   .catch((e) => {
    //     console.log("Error message: " + e.message);
    //     if (e.response) {
    //       console.log("Server response:", e.response.data);
    //     } else {
    //       console.log("Error details:", e);
    //     }
    //   });
    // getAllTasksByType("toDo")
    //   .then((res) => {
    //     setToDoTasks(res.data);
    //   })
    //   .catch((e) => {
    //     console.log("Error message: " + e.message);
    //     if (e.response) {
    //       console.log("Server response:", e.response.data);
    //     } else {
    //       console.log("Error details:", e);
    //     }
    //   });
    // getAllTasksByType("inProgress")
    //   .then((res) => {
    //     setInProgressTasks(res.data);
    //   })
    //   .catch((e) => {
    //     console.log("Error message: " + e.message);
    //     if (e.response) {
    //       console.log("Server response:", e.response.data);
    //     } else {
    //       console.log("Error details:", e);
    //     }
    //   });
    // getAllTasksByType("done")
    //   .then((res) => {
    //     setDoneTasks(res.data);
    //   })
    //   .catch((e) => {
    //     console.log("Error message: " + e.message);
    //     if (e.response) {
    //       console.log("Server response:", e.response.data);
    //     } else {
    //       console.log("Error details:", e);
    //     }
    //   });
////////////handleShare////
  const handleShare = async () => {
    try {
      const link = `${import.meta.env.VITE_BASE_URL}/api/auth/getTaskById/${taskId}`;
      await navigator.clipboard.writeText(link);
      setDateSpace(false);
      setTimeout(() => setDateSpace(true), 3000);
    } catch (error) {
      console.log("error in sharing" + error);
    }
  };

///////////register///////////
import { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import styles from "./Register.module.css";
import { FaEye, FaEyeSlash } from 'react-icons/fa';

export default function Register() {

  const baseUrl=import.meta.env.VITE_BASE_URL


  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false); 
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  

  const [error, setError] = useState({
    name: { message: "", isVisible: false },
    email: { message: "", isVisible: false },
    password: { message: "", isVisible: false },
    confirmPassword: { message: "", isVisible: false },
  });


  const navigate = useNavigate();

  const frontendErrorMessages = {
    name: {
      message: "Name is required",
      isValid: name.length > 0,
    },
    email: {
      message: "Email is required",
      isValid: email.length > 0,
    },
    password: {
      message: "Password is required",
      isValid: password.length > 0,
    },
    confirmPassword: {
      message: "Passwords do not match",
      isValid: confirmPassword === password,
    },
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    let isError = false;

    // Reset backend errors
    setError({
      name: { message: "", isVisible: false },
      email: { message: "", isVisible: false },
      password: { message: "", isVisible: false },
      confirmPassword: { message: "", isVisible: false },
    });

    Object.keys(frontendErrorMessages).forEach((key) => {
      if (!frontendErrorMessages[key].isValid) {
        isError = true;
        setError((prevError) => ({
          ...prevError,
          [key]: { message: frontendErrorMessages[key].message, isVisible: true },
        }));
      }
    });

    if (!isError) {
      setLoading(true);
      try {
        await axios.post(`${baseUrl}/api/auth/signup`, {
          name,
          email,
          password,
          confirmPassword,
        });
        navigate("/login");
      } catch (err) {
        setLoading(false);
        if (err.response && err.response.data.errors) {
          const backendErrors = err.response.data.errors;
          backendErrors.forEach(({ msg, param }) => {
            setError((prevError) => ({
              ...prevError,
              [param]: { message: msg, isVisible: true },
            }));
          });
        } else {
          console.error("Unexpected error:", err);
        }
      } finally {
        setLoading(false);
      }
    }
  };

  const handleLogin = () => {
    navigate("/login");
  };

  return (
    <div className={styles.container}>
      <h1>Register</h1>
      <div className={styles.inputFields}>
        <input
          type="text"
          placeholder="Name"
          value={name}
          className={styles.inputItem + " " + styles.name}
          onChange={(e) => setName(e.target.value)}
        />
        {error.name.isVisible && <p className={styles.errorMessage}>* {error.name.message}</p>}
        
        <input
          type="email"
          placeholder="Email"
          value={email}
          className={styles.inputItem + " " + styles.email}
          onChange={(e) => setEmail(e.target.value)}
        />
        {error.email.isVisible && <p className={styles.errorMessage}>* {error.email.message}</p>}

        <div>
      <div className={styles.passwordContainer}>
        <input
          type={showPassword ? 'text' : 'password'}
          placeholder="Password"
          value={password}
          className={`${styles.inputItem} ${styles.password}`}
          onChange={(e) => setPassword(e.target.value)}
        />
        <span
          onClick={() => setShowPassword(!showPassword)}
          className={styles.eyeIcon}
        >
          {showPassword ? <FaEyeSlash /> : <FaEye />}
        </span>
      </div>
      {error.password.isVisible && <p className={styles.errorMessage}>* {error.password.message}</p>}

      <div className={styles.passwordContainer}>
        <input
          type={showConfirmPassword ? 'text' : 'password'}
          placeholder="Confirm Password"
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
          className={`${styles.inputItem} ${styles.password}`}
        />
        <span
          onClick={() => setShowConfirmPassword(!showConfirmPassword)}
          className={styles.eyeIcon}
        >
          {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
        </span>
      </div>
      {error.confirmPassword.isVisible && (
        <p className={styles.errorMessage}>* {error.confirmPassword.message}</p>
      )}
    </div>

      </div>

      <button className={styles.registerBtn} onClick={handleSignup} disabled={loading}>
        {loading ? "Registering..." : "Register"}
      </button>
      <p className={styles.text}>Have an account ?</p>
      <button className={styles.loginBtn} onClick={handleLogin} disabled={loading}>
        Log in
      </button>
    </div>
  );
}

/////////////////////////package.json////////////////
"scripts":"npm install && npm install --prefix frontend && npm run build --prefix frontend"
"start":"node backend/server.js",
/////////////////
chatgpt//
-----------
  "test": "echo \"Error: no test specified\" && exit 1",
    "start": "concurrently \"npm run start --prefix frontend\" \"nodemon backend/server.js\"",
    "build": "cd frontend && npm run build",
    "server": "nodemon backend/server.js",
    "dev": "cd frontend && npm run dev"

/////////////////////////////
/////registerPage
// import { useState } from "react";
// import Form from "./Form.jsx";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import styles from "./Register.module.css";
// export default function Register() {
//   console.log(styles)
//   const navigate = useNavigate();

//   const token=localStorage.getItem("token");
//   if(token) {
//     console.log("token: " + token);
//     navigate("/dashboard");
//   }
//   const [formData, setFormData] = useState({
//     name: "",
//     email: "",
//     password: "",
//     confirmPassword: "",
//   });
//   const [error, setError] = useState({
//     name: false,
//     email: false,
//     password: false,
//     confirmPassword: false,
//   });
//   const formFields = [
//     {
//       name: "name",
//       type: "text",
//       placeholder: "Name",
//       value: formData.name,
//       className: styles.inputItem,
//       onChange: (e) => {
//         setFormData({ ...formData, name: e.target.value });
//       },
//     },
//     {
//       name: "email",
//       type: "email",
//       placeholder: "Email",
//       value: formData.email,
//       className: styles.inputItem,
//       onChange: (e) => {
//         setFormData({ ...formData, email: e.target.value });
//       },
//     },
//     {
//       name: "password",
//       type: "password",
//       placeholder: "Password",
//       value: formData.password,
//       className: styles.inputItem,
//       onChange: (e) => {
//         setFormData({ ...formData, password: e.target.value });
//       },
//     },
//     {
//       name: "confirmPassword",
//       type: "password",
//       placeholder: "Confirm Password",
//       value: formData.confirmPassword,
//       className: styles.inputItem,
//       onChange: (e) => {
//         setFormData({ ...formData, confirmPassword: e.target.value });
//       },
//     },
//   ];

//   console.log(error);

//   const errorMessages = {
//     name: {
//       message: "Name is required",
//       isValid: formData.name.length > 0,
//       onError: () => {
//         setError((error) => ({ ...error, name: true }));
//       },
//     },
//     email: {
//       message: "Email is required",
//       isValid: formData.email.length > 0,
//       onError: () => {
//         setError((error) => ({ ...error, email: true }));
//       },
//     },
//     password: {
//       message: "Password is required",
//       isValid: formData.password.length > 0,
//       onError: () => {
//         setError((error) => ({ ...error, password: true }));
//       },
//     },
//     confirmPassword: {
//       message: "Passwords do not match",
//       isValid: formData.confirmPassword === formData.password,
//       onError: () => {
//         setError((error) => ({ ...error, confirmPassword: true }));
//       },
//     },
//   };
//   const onSubmit = async (e) => {
//     e.preventDefault();
//     let isError = false;

//     Object.keys(errorMessages).forEach((key) => {
//       if (!errorMessages[key].isValid) {
//         isError = true;
//         errorMessages[key].onError();
//       }
//     });

//     if (!isError) {
//       axios
//         .post("http://localhost:8000/api/auth/signup", {
//           name: formData.name,
//           email: formData.email,
//           password: formData.password,
//           confirmPassword: formData.confirmPassword,
//         })
//         .then((response) => {
//           // if(response.data.status){
//           navigate("/login");
//           console.log("registered successfully");
//           // }
//         })
//         .catch((error) => {
//           console.log(error);
//         });
//     }
//   };

//   return (
//     <div className={styles.inputFields}>
//       <h1>Register</h1>
//       <Form
//         error={error}
//         formFields={formFields}
//         onSubmit={onSubmit}
//         errorMessages={errorMessages}

//       />
//     </div>
//   );
// }
///////////////////////////
import React, { useState, useRef } from "react";
import Popup from "reactjs-popup";
import "reactjs-popup/dist/index.css";
import styles from "./TaskCard.module.css";
import dots from "../assets/3dots.png";
import upArrow from "../assets/upArrow.png";
import downArrow from "../assets/downArrow.png";
import { formatDate } from "../../helper/formatDate";
import { getShortForm } from "../../helper/getShortForm";
import DeletePopup from "./DeletePopup";

function TaskCard({ title, priority, assignee, checkList, dueDate, taskType }) {
  const [isOpen, setIsOpen] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const popupRef = useRef();

  const checkListToggle = () => {
    setIsOpen(!isOpen);
  };
  const menuToggle = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const [isDeletePopupOpen, setDeletePopupOpen] = useState(false);

  const openDeletePopup = () => {
    menuToggle(); // Close the menu
    setDeletePopupOpen(true); // Open the delete popup
  };

  const closeDeletePopup = () => {
    setDeletePopupOpen(false); // Close the delete popup
  };

  let priorityClass;
  let dueDateClass;
  if (priority === "high") {
    priorityClass = styles.high;
    dueDateClass = styles.redDate;
  } else if (priority === "moderate") {
    priorityClass = styles.moderate;
    dueDateClass = styles.dueDate;
  } else {
    priorityClass = styles.low;
    dueDateClass = styles.dueDate;
  }

  let switchArray = ["BACKLOG", "PROGRESS", "DONE"];

  return (
    <div className={styles.container}>
      <div className={styles.cardNav}>
        <div className={priorityClass}></div>
        <div className={styles.priorityText}>
          {priority.toUpperCase()} PRIORITY
        </div>
        <div className={styles.assignee}>{getShortForm(assignee)}</div>
        <img
          src={dots}
          alt=""
          onClick={menuToggle}
          className={styles.menuIcon}
        />
      </div>
      {isMenuOpen && (
        <div className={styles.menu}>
          <ul>
            <li className={styles.menuItem} onClick={menuToggle}>
              Edit
            </li>
            <li className={styles.menuItem} onClick={menuToggle}>
              Share
            </li>

            <li
              className={`${styles.delete} ${styles.menuItem}`}
              onClick={openDeletePopup}
            >
              Delete
            </li>

            {/* <Popup
              open={isDeletePopupOpen}
              onClose={closeDeletePopup}
              modal
              nested
              className={styles.popup}
              contentStyle={{ width: "30%" }}
            >
              <DeletePopup closePopup={closeDeletePopup} />
            </Popup> */}

            <Popup
              className={styles.popup}
              contentStyle={{ width: "30%" }}
              trigger={<li className={styles.delete + " " + styles.menuItem} onClick={menuToggle}>Delete</li>}
              modal
              nested
              ref={popupRef}
              
            >
              {(close) => <DeletePopup closePopup={()=>{
                close()
                menuToggle()
              }} />}
              
            </Popup>
          </ul>
        </div>
      )}
      <div className={styles.title}>{title}</div>
      <div className={styles.checkList}>
        <div className={styles.checkListHead}>
          <p>Checklist(0/3)</p>
          <img
            src={isOpen ? upArrow : downArrow}
            onClick={checkListToggle}
            className={styles.arrowIcon}
          />
        </div>
        {isOpen && (
          <ul>
            {Object.entries(checkList).map(([key, value]) => (
              <li key={key} className={styles.checkItem}>
                <input
                  type="checkbox"
                  checked={value}
                  className={styles.checkbox}
                />
                {key}
              </li>
            ))}
          </ul>
        )}
      </div>
      <div className={styles.footer}>
        <div className={dueDateClass}>{formatDate(dueDate)}</div>
        {switchArray.map((item, index) => (
          <div key={index} className={styles.footItem}>
            {item}
          </div>
        ))}
      </div>
    </div>
  );
}

export default TaskCard;
///////////////////////